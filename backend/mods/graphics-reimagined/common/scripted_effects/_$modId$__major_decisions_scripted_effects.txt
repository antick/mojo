merge_empires_effect = {
	#effect description (wip: a detailed list of all affected kingdoms would be nice)
	show_as_tooltip = {
		custom_tooltip = merge_empires_result_de_jure
		custom_tooltip = merge_empires_result_destroy
	}

	hidden_effect = {
		save_scope_as = founder

		primary_title = {
			save_scope_as = unified_title
		}

		#change de-jure-lieges for all non primary empire titles
		every_held_title = {
			limit = {
				tier = tier_empire
				NOT = { this = scope:unified_title }
			}
			#change de-jure-lieges of all kingdoms
			every_in_de_jure_hierarchy = {
				limit = {
					tier = tier_kingdom
				}
				set_de_jure_liege_title = scope:unified_title

				#check if a player needs to be notified
				if = {
					limit = {
						exists = kingdom
						kingdom = {
							exists = holder
							holder = {
								NOT = { this = root }
								NOT = { top_liege = root }
								is_ai = no
							}
						}
					}

					add_to_temporary_list = kingdoms_for_notification
					root = {
						save_temporary_scope_value_as = {
							name = send_notifications
							value = yes
						}
					}
				}
			}
			#mark empire title for deletion
			add_to_temporary_list = excess_empire_titles
		}

		#search for completely controlled additional empires
		every_sub_realm_county = {
			limit = {
				exists = empire
				NOT = { exists = empire.holder }
				holder.top_liege = root
				empire = {
					save_temporary_scope_as = test_empire
				}
				holder.top_liege = {
					completely_controls = scope:test_empire
				}
			}
			if = {
				limit = {
					NOT = {
						empire = {
							is_in_list = additional_de_jure_empires
						}
					}
				}
				empire = {
					add_to_temporary_list = additional_de_jure_empires
				}
			}
		}

		#change de-jure-lieges of all kingdoms in additional empires
		every_in_list = {
			list = additional_de_jure_empires
			every_in_de_jure_hierarchy = {
				limit = {
					tier = tier_kingdom
				}
				set_de_jure_liege_title = scope:unified_title
			}
		}

		#destroy non-primary empires
		every_in_list = {
			list = excess_empire_titles
			limit = {
				NOT = { this = scope:unified_title }
			}
			root = {
				destroy_title = prev
			}
		}

		#message to founder (see major_decisions.1103)
		trigger_event = major_decisions_merge_empires.1001

		#messages to other players
		every_player = {
			#message to vassal players (see major_decisions.1104)
			if = {
				limit = {
					top_liege = scope:founder
					NOT = { this = root }
				}
				trigger_event = major_decisions_merge_empires.1002
			}

			#message to non-vassal players who lose de jure territory (see major_decisions.1105)
			else_if = {
				limit = {
					exists = scope:send_notifications
					NOT = { this = root }
					NOT = { top_liege = scope:founder }
					any_held_title = {
						any_in_de_jure_hierarchy = {
							continue = {
								tier > tier_kingdom
							}
							tier = tier_kingdom
							is_in_list = kingdoms_for_notification
						}
					}
				}
				every_held_title = {
					every_in_de_jure_hierarchy = {
						continue = {
							tier > tier_kingdom
						}
						limit = {
							tier = tier_kingdom
							is_in_list = kingdoms_for_notification
						}
						add_to_list = notification_titles
					}
				}
				if = {
					limit = {
						any_in_list = {
							list = notification_titles
							count > 0
						}
					}
					trigger_event = major_decisions_merge_empires.1003
				}
			}
		}
	}
}

merge_kingdoms_effect = {
	# This section is meant to show tooltips when the effect is run
	show_as_tooltip = {
		custom_tooltip = merge_kingdoms_result_de_jure # Tooltip for de jure kingdoms merged
		custom_tooltip = merge_kingdoms_result_destroy # Tooltip for destroyed kingdoms
	}

	hidden_effect = { # This is the main effect that will be run and is hidden from the player's view
		save_scope_as = founder # Save the scope of the character who initialized the effect as 'founder'

		primary_title = {
			save_scope_as = unified_title # Save the scope of the primary title of the character who initialized the effect as 'unified_title'
		}

		# Changes the de jure liege for all non-primary kingdom titles held by the character who initialized the effect
		every_held_title = {
			limit = {
				tier = tier_kingdom # Limited to kingdom tier titles
				NOT = { this = scope:unified_title } # Excludes the unified title
			}

			every_in_de_jure_hierarchy = {
				limit = {
					tier = tier_duchy # Limited to duchy tier titles
				}
				set_de_jure_liege_title = scope:unified_title # Set the de jure liege to the unified title

				# Check if a player needs to be notified about the changes
				if = {
					limit = {
						exists = kingdom
						kingdom = {
							exists = holder
							holder = {
								NOT = { this = root } # Exclude the character who initialized the effect
								NOT = { top_liege = root } # Exclude vassals of the character who initialized the effect
								is_ai = no # Only include non-AI characters
							}
						}
					}
					add_to_temporary_list = kingdoms_for_notification # Add affected kingdoms to the list for notification
					root = {
						save_temporary_scope_value_as = {
							name = send_notifications # Save the value for sending notifications
							value = yes
						}
					}
				}
			}
			add_to_temporary_list = excess_kingdom_titles # Mark non-primary kingdoms for deletion
		}

		# Look for completely controlled additional kingdoms
		every_sub_realm_county = {
			limit = {
				exists = kingdom
				NOT = { exists = kingdom.holder } # Excludes kingdoms with current holder
				holder.top_liege = root # Limited to counties whose top liege is the character who initialized the effect
				kingdom = {
					save_temporary_scope_as = test_kingdom # Save the kingdom for testing
				}
				holder.top_liege = {
					completely_controls = scope:test_kingdom # Check if the top liege completely controls the kingdom
				}
			}
			if = {
				limit = {
					NOT = {
						kingdom = {
							is_in_list = additional_de_jure_kingdoms # Excludes kingdoms already in the list
						}
					}
				}
				empire = {
					add_to_temporary_list = additional_de_jure_kingdoms # Add completely controlled additional kingdoms to the list
				}
			}
		}

		# Change de jure lieges of all kingdoms in additional empires
		every_in_list = {
			list = additional_de_jure_kingdoms
			every_in_de_jure_hierarchy = {
				limit = {
					tier = tier_kingdom
				}
				set_de_jure_liege_title = scope:unified_title # Set the de jure liege to the unified title
			}
		}

		# Destroy non-primary empires
		every_in_list = {
			list = excess_kingdom_titles
			limit = {
				NOT = { this = scope:unified_title } # Excludes the unified title
			}
			root = {
				destroy_title = prev # Destroy the selected kingdom
			}
		}
		# Sends a message to the founder
		trigger_event = major_decisions_merge_kingdoms.1001

		# Sends messages to other players
		every_player = {
			# Sends message to vassal players
			if = {
				limit = {
					top_liege = scope:founder # Limited to vassals of the character who initialized the effect
					NOT = { this = root } # Exclude the character who initialized the effect
				}
				trigger_event = major_decisions_merge_kingdoms.1002
			}

			# Sends message to non-vassal players who lose de jure territory
			else_if = {
				limit = {
					exists = scope:send_notifications # Only if notifications need to be sent
					NOT = { this = root } # Exclude the character who initialized the effect
					NOT = { top_liege = scope:founder } # Exclude vassals of the character who initialized the effect
					any_held_title = {
						any_in_de_jure_hierarchy = {
							continue = {
								tier > tier_duchy # Only for higher tier than duchy
							}
							tier = tier_duchy
							is_in_list = duchies_for_notification # Only if the duchy is in the notification list
						}
					}
				}
				every_held_title = {
					every_in_de_jure_hierarchy = {
						continue = {
							tier > tier_duchy # Only for higher tier than duchy
						}
						limit = {
							tier = tier_duchy
							is_in_list = duchies_for_notification # Only if the duchy is in the notification list
						}
						add_to_list = notification_titles # Add affected duchies to the notification list
					}
				}
				if = {
					limit = {
						any_in_list = {
							list = notification_titles
							count > 0 # Only if there are affected duchies
						}
					}
					trigger_event = major_decisions_merge_kingdoms.1003 # Send notification
				}
			}
		}
	}
}

create_custom_duchy_effect = {
	custom_tooltip = create_new_duchy
	show_as_tooltip = {
		every_held_title = {
			custom = create_title_every_held_county
			limit = {
				tier = tier_county
			}
			custom_tooltip = create_custom_duchy_de_jure_changes
		}
	}

	hidden_effect = {
		save_scope_as = founder
		primary_title = {
			save_scope_as = old_title
		}

		create_dynamic_title = {
			tier = duchy
			name = NEW_CREATED_TITLE_NAME
		}
		create_title_and_vassal_change = {
			type = created
			save_scope_as = change
			add_claim_on_loss = no
		}

		scope:new_title = {
			change_title_holder = {
				holder = root
				change = scope:change
			}
		}

		resolve_title_and_vassal_change = scope:change

		#Check if all territory is from a single Kingdom, and if so, make Duchy de jure of that Kingdom
		every_sub_realm_county = {
			if = {
				limit = {
					exists = kingdom
				}
				kingdom = {
					if = {
						limit = {
							NOT = {
								is_in_list = potential_kingdoms
							}
						}
						add_to_list = potential_kingdoms
					}
				}
			}
		}
		if = {
			limit = {
				any_in_list = {
					list = potential_kingdoms
					count > 0
				}
			}
			ordered_in_list = {
				list = potential_kingdoms
				order_by = {
					every_in_de_jure_hierarchy = {
						continue = {
							tier > tier_county
						}
						limit = {
							tier = tier_county
							holder.top_liege = root
						}
						add = 1
					}
				}
				position = 0
				save_scope_as = old_kingdom
			}
		}
		if = {
			limit = {
				exists = scope:old_kingdom
			}
			scope:new_title = {
				set_de_jure_liege_title = scope:old_kingdom
			}
		}

		every_held_title = {
			limit = {
				tier = tier_county
			}
			if = {
				limit = {
					#Check if you need to notify a player
					OR = {
						AND = {
							exists = duchy
							duchy = {
								exists = holder
								holder = {
									NOT = { this = root }
									is_ai = no
								}
							}
						}
						AND = {
							exists = kingdom
							kingdom = {
								exists = holder
								holder = {
									NOT = { this = root }
									is_ai = no
								}
							}
						}
					}
				}
				add_to_temporary_list = county_for_notification
				root = {
					save_temporary_scope_value_as = {
						name = send_notifications
						value = yes
					}
				}
			}
			set_de_jure_liege_title = scope:new_title
		}

		every_sub_realm_county = {
			limit = {
				exists = county
				NOT = { exists = county.holder }
				holder.top_liege = root
				county = {
					save_temporary_scope_as = test_county
				}
				holder.top_liege = {
					completely_controls = scope:test_county
				}
			}
			if = {
				limit = {
					NOT = {
						county = {
							is_in_list = additional_de_jure_counties
						}
					}
				}
				county = {
					set_de_jure_liege_title = scope:new_title
					add_to_list = additional_de_jure_counties
				}
			}
		}
		if = {
			limit = {
				any_in_list = {
					list = potential_kingdoms
					count > 0
				}
			}
			ordered_in_list = {
				list = potential_kingdoms
				order_by = {
					every_in_de_jure_hierarchy = {
						continue = {
							tier > tier_barony
						}
						limit = {
							tier = tier_barony
							holder.top_liege = root
						}
						add = 1
					}
				}
				position = 0
				save_scope_as = old_kingdom
			}
		}

		if = {
			limit = {
				exists = scope:old_kingdom
			}
			scope:new_title = {
				set_de_jure_liege_title = scope:old_kingdom
			}
		}

		scope:new_title = {
			set_coa = scope:old_title
			set_color_from_title = scope:old_title
			set_capital_county = scope:old_title.title_capital_county
		}
		set_primary_title_to = scope:new_title

		trigger_event = major_decisions.1101

		every_player = {
			if = {
				limit = {
					top_liege = scope:founder
					NOT = { this = root }
				}
				trigger_event = major_decisions.1102
			}
			else_if = {
				limit = {
					exists = scope:send_notifications
					NOT = { this = root }
					NOT = { top_liege = scope:founder }
					any_held_title = {
						any_in_de_jure_hierarchy = {
							continue = {
								tier > tier_county
							}
							tier = tier_duchy
							is_in_list = county_for_notification
						}
					}
				}
				every_held_title = {
					every_in_de_jure_hierarchy = {
						continue = {
							tier > tier_county
						}
						limit = {
							tier = tier_county
							is_in_list = county_for_notification
						}
						add_to_list = notification_titles
					}
				}
				if = {
					limit = {
						any_in_list = {
							list = notification_titles
							count > 0
						}
					}
					trigger_event = major_decisions.1105
				}
			}
		}
	}
}
